Effective Objective-C 2.0读书笔记

1.了解Objective—C语言的起源；
2.在类的头文件中尽量少引用其他头文件；
	a.除非必要，否则不要引入头文件。一般来说，应该在某个类的头文件中使用向前声明来提及别的类（@class xxx）,并在实现文件中引入那些类的头文件。这样做可以尽量降低类与类之间的耦合（coupling）；
	b.有时无法使用向前声明，比如要声明某个类遵循一项协议。这种情况下，尽量把“该类遵循某协议”的这条声明移植“class-continuation分类”中。
3.多用字面量语法，少用与之等价的方法
	a.字面数值
		不用：NSNumber *someNumber = [NSNumber numberWithInt:1];
		使用：NSNumber *someNumber = @1;
	b.字面量数组
		NSArray *animals = @[@"cat",@"dog",@"mouse",@"badger"];
		取值：NSString *dog = animals[1];
	c.字面量字典
		NSDictionary *personData = @{@"firstName":@"Matt",
									 @"lastName" : @"Galloway",
									 @"age":@28};
		字典中的对象必须是OC对象，所以不能把整数28直接放进去，而要将其封装在NSNumber实例中才行。
		取值：NSString *lastName = personData[@"lastName"];
4.多用类型常量，少用#define预处理指令
	a.在实现文件中使用static const 来定义“只在编译单元内可见的常量”。由于此类型常量不在全局符号表中，所以无需围棋名称加前缀；
5.用枚举标示状态、选项、状态码
	a.在处理枚举类型的switch语句中不要实现default分支。这样的话，加入新的枚举之后，编译器就会提示开发者：switch语句并未处理所有枚举；

6.理解“属性”之一概念	
	a.属性的特质分为四类：
		原子性 在默认情况下，有编译器所合成的方法会通过锁定机制确保其原子性(atomicity)。如果属性具备nonatomic特质，则不适用同步锁。
		assign “设置方法”只会执行针对“纯量类型”（如：CGFloat，NSInteger）的简单赋值操作；
		strong 此特质表名该属性定义了一种“拥有关系”。为这种属性设置新值时，设置方法会先保留新值，并释放旧值，然后再将新值设置上去；
		weak   此特质表名改属性定义了一种“非拥有关系”。为这种属性设置新值时，既不保留新值，也不释放旧值。
		copy   表示的所属关系与strong类似。然而设置方法并不保留新值，而是将其“拷贝”。
		atomic 与 nonatomic 的区别: atomic 特质的获取方法会通过锁定机制确保其操作的原子性，也就是说：两个线程读写同一属性，那么不论何时，总能看到有效的属性值。若是不加锁（nona	tomic）,那么当其中一个线程正在改写某属性值时，另外一个线程也许会突然闯入，把尚未改好的属性值读取出来。此时属性值可能不对。
			但是在IOS开发中所有属性都声明为 nonatomic 。这样做的历史原因是：在IOS中使用同步锁开销太大，会带来性能问题。一般情况下并不要求属性必须是“原子的”，因为这并不能保证线程安全。
7.没看明白
8.






